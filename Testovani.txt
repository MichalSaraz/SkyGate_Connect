{
  "flightNumber": "1305",
  "airlineId": "DY",
  "departureDate": "18OCT"
}



{
  "flightNumber": "1305",
  "airlineId": "DY",
  "departureDate": "18OCT",
  "lastName": "Tromp"
}



005d511e-f677-4c64-ae6b-8ea7bf09474f
2181 === 58590667-cec5-4a89-a58e-b1572d7086e9

[
  {
    "tagType": "System",
    "weight": 10,
    "specialBagType": null,
    "baggageType": "Local",
    "description": null,
    "finalDestination": "KRS",
    "tagNumber": null
  },
  {
    "tagType": "System",
    "weight": 10,
    "specialBagType": "Buggy",
    "baggageType": "Local",
    "description": null,
    "finalDestination": "KRS",
    "tagNumber": null
  }
]



[
  {
    "airlineId": "BA",
    "flightNumber": "854",
    "departureDate": "19OCT",
    "destinationFrom": "KRS",
    "destinationTo": "LHR",
    "flightClass": "Y"
  }
]


add, conn fl = 99382844-5d43-4051-97a7-07858f76bc7e
[
  {
    "flightIds": ["58590667-cec5-4a89-a58e-b1572d7086e9", "99382844-5d43-4051-97a7-07858f76bc7e"],
    "specialServiceRequests": [
      {
        "SSRCode": "WCHR",
        "freeText": null
      },
      {
        "SSRCode": "WCMP",
        "freeText": "dimensions 50x50x60"
      }
    ]
  }
]

delete
{
  "58590667-cec5-4a89-a58e-b1572d7086e9": ["WCHR", "WCMP"],
  "99382844-5d43-4051-97a7-07858f76bc7e": ["WCHR", "WCMP"]
}


{
  "firstName": "joijj",
  "lastName": "oioim",
  "gender": "M",
  "dateOfBirth": "12JUL2011",
  "documentNumber": "16543415",
  "documentType": "AlienPassport",
  "countryOfIssue": "NOR",
  "dateOfIssue": "14AUG2020",
  "expirationDate": "14AUG2030",
  "nationality": "NOR"
}





edit:
[
  {
  "apisDataId": "c9a46b82-b1f8-4d0e-ac61-28e7debc2c03",
  "firstName": "hkjhk",
  "lastName": "fuj",
  "gender": "M",
  "dateOfBirth": "12JUL2011",
  "documentNumber": "13531543",
  "documentType": "AlienPassport",
  "countryOfIssue": "NOR",
  "dateOfIssue": "14AUG2020",
  "expirationDate": "14AUG2030",
  "nationality": "NOR"
},
{
  "apisDataId": "98628d41-cabc-4c81-9c57-deb160f23e83",
  "firstName": "zmena",
  "lastName": "zmena",
  "gender": "M",
  "dateOfBirth": "12JUL2011",
  "documentNumber": "45643254",
  "documentType": "AlienPassport",
  "countryOfIssue": "NOR",
  "dateOfIssue": "14AUG2020",
  "expirationDate": "14AUG2030",
  "nationality": "NOR"
}
]




deletecomment
{
    "58590667-cec5-4a89-a58e-b1572d7086e9": ["17e72928-7c09-48b8-bbe0-a5aa9491eb6c"],
    "99382844-5d43-4051-97a7-07858f76bc7e": ["17e72928-7c09-48b8-bbe0-a5aa9491eb6c", "8ff272ba-58e0-4578-8d8a-71d79b917074"]
}

comment
{
    "flightIds": [
        "58590667-cec5-4a89-a58e-b1572d7086e9",
        "99382844-5d43-4051-97a7-07858f76bc7e"
    ],
    "text": "Tento let byl skvělý!"
}

















//[HttpPost("{id:guid}/add-travel-document")]
        //public async Task<ActionResult<IEnumerable<APISData>>> AddTravelDocuments(Guid id,
        //    [FromBody] List<JObject> dataList)
        //{
        //    var addedApisDataList = new List<APISData>();

        //    foreach (var data in dataList)
        //    {
        //        var model = new AddAPISDataModel
        //        {
        //            FirstName = data["firstName"]?.ToString(),
        //            LastName = data["lastName"]?.ToString(),
        //            Gender = (PaxGenderEnum)Enum.Parse(typeof(PaxGenderEnum), data["gender"]?.ToString()),
        //            DateOfBirth = (DateTime)_timeProvider.ParseDate(data["dateOfBirth"]?.ToString(), true),
        //            DocumentNumber = data["documentNumber"]?.ToString(),
        //            DocumentType = (DocumentTypeEnum)Enum.Parse(typeof(DocumentTypeEnum), data["documentType"]?.ToString()),
        //            CountryOfIssue = data["countryOfIssue"]?.ToString(),
        //            DateOfIssue = (DateTime)_timeProvider.ParseDate(data["dateOfIssue"]?.ToString(), true),
        //            ExpirationDate = (DateTime)_timeProvider.ParseDate(data["expirationDate"]?.ToString(), true),
        //            Nationality = data["nationality"]?.ToString()
        //        };

        //        var nationality = await _countryRepository.GetCountryByCriteriaAsync(d =>
        //            d.Country3LetterCode == model.Nationality);
        //        var countryOfIssue = await _countryRepository.GetCountryByCriteriaAsync(d =>
        //            d.Country3LetterCode == model.CountryOfIssue);

        //        if (nationality == null || countryOfIssue == null)
        //        {
        //            var message = (nationality == null) ? $"Nationality {model.Nationality}"
        //                : (countryOfIssue == null) ? $"Country of Issue {model.CountryOfIssue}"
        //                : $"Nationality {model.Nationality} and Country of Issue {model.CountryOfIssue}";

        //            return NotFound(new ApiResponse(404, message + " not found."));
        //        }

        //        var apisData = new APISData(id,
        //            nationality.Country2LetterCode,
        //            countryOfIssue.Country2LetterCode,
        //            model.DocumentNumber,
        //            model.DocumentType,
        //            model.Gender,
        //            model.FirstName,
        //            model.LastName,
        //            model.DateOfBirth,
        //            model.DateOfIssue,
        //            model.ExpirationDate);

        //        addedApisDataList.Add(apisData);
        //    }

        //    await _apisDataRepository.AddAsync(addedApisDataList.ToArray());

        //    return Ok();
        //}

        //[HttpPut("{id:guid}/edit-travel-document")]
        //public async Task<ActionResult<APISData>> EditTravelDocument(Guid id,
        //    [FromBody] List<JObject> dataList)
        //{
        //    var editedApisDataList = new List<APISData>();

        //    foreach (var data in dataList)
        //    {
        //        var model = new EditAPISDataModel
        //        {
        //            APISDataId = Guid.Parse(data["apisDataId"]?.ToString()),
        //            FirstName = data["firstName"]?.ToString(),
        //            LastName = data["lastName"]?.ToString(),
        //            Gender = (PaxGenderEnum)Enum.Parse(typeof(PaxGenderEnum), data["gender"]?.ToString()),
        //            DateOfBirth = (DateTime)_timeProvider.ParseDate(data["dateOfBirth"]?.ToString(), true),
        //            DocumentNumber = data["documentNumber"]?.ToString(),
        //            DocumentType = (DocumentTypeEnum)Enum.Parse(typeof(DocumentTypeEnum), data["documentType"]?.ToString()),
        //            CountryOfIssue = data["countryOfIssue"]?.ToString(),
        //            DateOfIssue = (DateTime)_timeProvider.ParseDate(data["dateOfIssue"]?.ToString(), true),
        //            ExpirationDate = (DateTime)_timeProvider.ParseDate(data["expirationDate"]?.ToString(), true),
        //            Nationality = data["nationality"]?.ToString()
        //        };

        //        var nationality = await _countryRepository.GetCountryByCriteriaAsync(d =>
        //            d.Country3LetterCode == model.Nationality);
        //        var countryOfIssue = await _countryRepository.GetCountryByCriteriaAsync(d =>
        //            d.Country3LetterCode == model.CountryOfIssue);

        //        if (nationality == null || countryOfIssue == null)
        //        {
        //            var message = (nationality == null) ? $"Nationality {model.Nationality}"
        //                : (countryOfIssue == null) ? $"Country of Issue {model.CountryOfIssue}"
        //                : $"Nationality {model.Nationality} and Country of Issue {model.CountryOfIssue}";

        //            return NotFound(new ApiResponse(404, message + " not found."));
        //        }

        //        var selectedTravelDocument = await _apisDataRepository.GetAPISDataByCriteriaAsync(d =>
        //            d.PassengerId == id && d.Id == model.APISDataId);

        //        if (selectedTravelDocument != null)
        //        {
        //            selectedTravelDocument.FirstName = model.FirstName;
        //            selectedTravelDocument.LastName = model.LastName;
        //            selectedTravelDocument.Gender = model.Gender;
        //            selectedTravelDocument.DateOfBirth = model.DateOfBirth;
        //            selectedTravelDocument.DocumentNumber = model.DocumentNumber;
        //            selectedTravelDocument.DocumentType = model.DocumentType;
        //            selectedTravelDocument.CountryOfIssueId = countryOfIssue.Country2LetterCode;
        //            selectedTravelDocument.DateOfIssue = model.DateOfIssue;
        //            selectedTravelDocument.ExpirationDate = model.ExpirationDate;
        //            selectedTravelDocument.NationalityId = nationality.Country2LetterCode;
        //            editedApisDataList.Add(selectedTravelDocument);
        //        }
        //    }

        //    await _apisDataRepository.UpdateAsync(editedApisDataList.ToArray());

        //    return Ok();
        //}






















using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class Add_and_delete_some_indexes : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropIndex(
                name: "IX_FrequentFlyerCards_CardNumber",
                table: "FrequentFlyerCards");            

             migrationBuilder.DropIndex(
                name: "IX_Passengers_Id",
                table: "Passengers");

            migrationBuilder.DropColumn(
                name: "FrequentFlyerNumber",
                table: "FrequentFlyerCards");

            migrationBuilder.DropColumn(
                name: "NewId",
                table: "Flights");

            migrationBuilder.CreateIndex(
                name: "IX_FlightBaggage_FlightId",
                table: "FlightBaggage",
                column: "FlightId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FlightComment_FlightId",
                table: "FlightComment",
                column: "FlightId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FlightComment_CommentId",
                table: "FlightComment",
                column: "CommentId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Seats_FlightId",
                table: "Seats",
                column: "FlightId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_SpecialServiceRequests_FlightId",
                table: "SpecialServiceRequests",
                column: "FlightId",
                unique: true);

            migrationBuilder.RenameIndex(
                name: "IX_PassengerFlight_PassengerId",
                table: "PassengerFlight",
                newName: "IX_PassengerFlight_BasePassengerOrItemId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropIndex(
                name: "IX_FlightBaggage_FlightId",
                table: "FlightBaggage");

            migrationBuilder.DropIndex(
                name: "IX_FlightComment_FlightId",
                table: "FlightComment");

            migrationBuilder.DropIndex(
                name: "IX_FlightComment_CommentId",
                table: "FlightComment");

            migrationBuilder.DropIndex(
                name: "IX_Seats_FlightId",
                table: "Seats");

            migrationBuilder.DropIndex(
                name: "IX_SpecialServiceRequests_FlightId",
                table: "SpecialServiceRequests");

            migrationBuilder.RenameIndex(
                name: "IX_PassengerFlight_BasePassengerOrItemId",
                table: "PassengerFlight",
                newName: "IX_PassengerFlight_PassengerId");

            migrationBuilder.AddColumn<string>(
                name: "FrequentFlyerNumber",
                table: "FrequentFlyerCards",
                type: "text",
                nullable: true);

            migrationBuilder.AddColumn<Guid>(
                name: "NewId",
                table: "Flights",
                type: "uuid",
                nullable: false,
                defaultValue: new Guid());

            migrationBuilder.CreateIndex(
                name: "IX_FrequentFlyerCards_CardNumber",
                table: "FrequentFlyerCards",
                column: "CardNumber",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Passengers_Id",
                table: "Passengers",
                column: "Id",
                unique: true);
        }
    }
}
