// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230928211932_Initial-Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.BaggageContext.Baggage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaggageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpecialBag")
                        .HasColumnType("boolean");

                    b.Property<int>("PassengerId")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.ToTable("Baggage");
                });

            modelBuilder.Entity("Core.FlightContext.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AircraftId")
                        .HasColumnType("integer");

                    b.Property<int>("AirlineId")
                        .HasColumnType("integer");

                    b.Property<int>("ArrivalAirportId")
                        .HasColumnType("integer");

                    b.Property<string>("ArrivalDateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DepartureAirportId")
                        .HasColumnType("integer");

                    b.Property<string>("DepartureDateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FlightIdentifier")
                        .HasColumnType("integer");

                    b.Property<string>("FlightNumber")
                        .HasColumnType("text");

                    b.Property<string>("FlightStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlightType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalBookedPassengers")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCheckedBaggage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("AirlineId");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Core.FlightContext.FlightInfo.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AircraftTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("AirlineId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("JumpSeatsAvailable")
                        .HasColumnType("integer");

                    b.Property<string>("RegistrationCode")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("SeatMapId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AircraftTypeId");

                    b.HasIndex("AirlineId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SeatMapId");

                    b.ToTable("Aircrafts");
                });

            modelBuilder.Entity("Core.FlightContext.FlightInfo.AircraftType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AircraftTypeIATACode")
                        .HasColumnType("text");

                    b.Property<string>("ModelName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AircraftTypes");
                });

            modelBuilder.Entity("Core.FlightContext.FlightInfo.Airline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountingCode")
                        .HasColumnType("integer");

                    b.Property<int?>("AirlinePrefix")
                        .HasColumnType("integer");

                    b.Property<string>("CarrierCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("Core.FlightContext.FlightInfo.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AirportName")
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("IATAAirportCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("Core.FlightContext.JoinClasses.FlightBaggage", b =>
                {
                    b.Property<int>("FlightId")
                        .HasColumnType("integer");

                    b.Property<int>("BaggageId")
                        .HasColumnType("integer");

                    b.HasKey("FlightId", "BaggageId");

                    b.HasIndex("BaggageId");

                    b.ToTable("FlightBaggage");
                });

            modelBuilder.Entity("Core.PassengerContext.Booking.BookingReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PNR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BookingReferences");
                });

            modelBuilder.Entity("Core.PassengerContext.Booking.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMarkedAsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Core.PassengerContext.Booking.FrequentFlyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AirlineId")
                        .HasColumnType("integer");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardholderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrequentFlyerNumber")
                        .HasColumnType("text");

                    b.Property<long>("MilesAvailable")
                        .HasColumnType("bigint");

                    b.Property<int>("PassengerId")
                        .HasColumnType("integer");

                    b.Property<string>("TierLever")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("CardNumber")
                        .IsUnique();

                    b.HasIndex("PassengerId")
                        .IsUnique();

                    b.ToTable("FrequentFlyers");
                });

            modelBuilder.Entity("Core.PassengerContext.Booking.SpecialServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FreeText")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("IsFreeTextMandatory")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("SpecialServiceRequest");
                });

            modelBuilder.Entity("Core.PassengerContext.JoinClasses.PassengerComment", b =>
                {
                    b.Property<int>("PassengerId")
                        .HasColumnType("integer");

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.HasKey("PassengerId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("PassengerComment");
                });

            modelBuilder.Entity("Core.PassengerContext.JoinClasses.PassengerFlight", b =>
                {
                    b.Property<int>("PassengerId")
                        .HasColumnType("integer");

                    b.Property<int>("FlightId")
                        .HasColumnType("integer");

                    b.HasKey("PassengerId", "FlightId");

                    b.HasIndex("FlightId");

                    b.ToTable("PassengerFlight");
                });

            modelBuilder.Entity("Core.PassengerContext.JoinClasses.PassengerSpecialServiceRequest", b =>
                {
                    b.Property<int>("PassengerId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialServiceRequestId")
                        .HasColumnType("integer");

                    b.HasKey("PassengerId", "SpecialServiceRequestId");

                    b.HasIndex("SpecialServiceRequestId");

                    b.ToTable("PassengerSpecialServiceRequest");
                });

            modelBuilder.Entity("Core.PassengerContext.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AcceptanceStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BoardingSequenceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("BoardingZone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FrequentFlyerId")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PNRId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PNRId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("Core.PassengerContext.Regulatory.APISData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DateOfIssue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IssueCountryId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<int>("PassengerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IssueCountryId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PassengerId");

                    b.ToTable("APISData");
                });

            modelBuilder.Entity("Core.PassengerContext.Regulatory.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AircraftRegistrationPrefix")
                        .HasColumnType("text");

                    b.Property<string>("Country2LetterCode")
                        .HasColumnType("text");

                    b.Property<string>("Country3LetterCode")
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Core.SeatingContext.FlightClassSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BassinetSeats")
                        .HasColumnType("jsonb")
                        .HasColumnName("BassinetSeats");

                    b.Property<string>("ExitRowSeats")
                        .HasColumnType("jsonb")
                        .HasColumnName("ExitRowSeats");

                    b.Property<string>("FlightClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NotExistingSeats")
                        .HasColumnType("jsonb")
                        .HasColumnName("NotExistingSeats");

                    b.Property<string>("RowRange")
                        .HasColumnType("jsonb")
                        .HasColumnName("RowRange");

                    b.Property<string>("SeatPositionsAvailable")
                        .HasColumnType("jsonb")
                        .HasColumnName("SeatPositionsAvailable");

                    b.HasKey("Id");

                    b.ToTable("FlightClassSpecifications");
                });

            modelBuilder.Entity("Core.SeatingContext.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FlightClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PassengerId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.Property<int?>("SeatMapId")
                        .HasColumnType("integer");

                    b.Property<string>("SeatNumber")
                        .HasColumnType("text");

                    b.Property<string>("SeatStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeatType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.HasIndex("SeatMapId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("Core.SeatingContext.SeatMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AircraftTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("AirlineId")
                        .HasColumnType("integer");

                    b.Property<string>("FlightClassesSpecification")
                        .HasColumnType("jsonb")
                        .HasColumnName("FlightClassesSpecification");

                    b.Property<string>("SeatMapId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AircraftTypeId");

                    b.HasIndex("AirlineId");

                    b.ToTable("SeatMaps");
                });

            modelBuilder.Entity("Core.BaggageContext.Baggage", b =>
                {
                    b.HasOne("Core.PassengerContext.Passenger", "Passenger")
                        .WithMany("PassengerCheckedBags")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.BaggageContext.BaggageTag", "BaggageTag", b1 =>
                        {
                            b1.Property<int>("BaggageId")
                                .HasColumnType("integer");

                            b1.Property<int>("AirlineId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<string>("TagNumber")
                                .HasColumnType("text")
                                .HasColumnName("TagNumber");

                            b1.HasKey("BaggageId");

                            b1.HasIndex("AirlineId");

                            b1.ToTable("TagNumbers");

                            b1.HasOne("Core.FlightContext.FlightInfo.Airline", "Airline")
                                .WithMany()
                                .HasForeignKey("AirlineId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("BaggageId");

                            b1.Navigation("Airline");
                        });

                    b.OwnsOne("Core.BaggageContext.SpecialBag", "SpecialBag", b1 =>
                        {
                            b1.Property<int>("BaggageId")
                                .HasColumnType("integer");

                            b1.Property<string>("SpecialBagDescription")
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("SpecialBagDescription");

                            b1.Property<string>("SpecialBagType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("SpecialBagType");

                            b1.HasKey("BaggageId");

                            b1.ToTable("Baggage");

                            b1.WithOwner()
                                .HasForeignKey("BaggageId");
                        });

                    b.Navigation("BaggageTag")
                        .IsRequired();

                    b.Navigation("Passenger");

                    b.Navigation("SpecialBag");
                });

            modelBuilder.Entity("Core.FlightContext.Flight", b =>
                {
                    b.HasOne("Core.FlightContext.FlightInfo.Aircraft", "Aircraft")
                        .WithMany()
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.FlightContext.FlightInfo.Airline", "Airline")
                        .WithMany()
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.FlightContext.FlightInfo.Destination", "ArrivalAirport")
                        .WithMany()
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.FlightContext.FlightInfo.Destination", "DepartureAirport")
                        .WithMany("DepartingFlights")
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.BoardingContext.Boarding", "Boarding", b1 =>
                        {
                            b1.Property<int>("FlightId")
                                .HasColumnType("integer");

                            b1.Property<string>("BoardingStatus")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("BoardingStatus");

                            b1.HasKey("FlightId");

                            b1.ToTable("Flights");

                            b1.WithOwner()
                                .HasForeignKey("FlightId");
                        });

                    b.OwnsMany("Core.FlightContext.FlightInfo.Codeshare", "Codeshare", b1 =>
                        {
                            b1.Property<int>("FlightId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("CodeshareAirlineId")
                                .HasColumnType("integer");

                            b1.Property<int>("CodeshareFlightIdentifier")
                                .HasColumnType("integer");

                            b1.Property<string>("CodeshareFlightNumber")
                                .HasColumnType("text")
                                .HasColumnName("CodeshareFlightNumber");

                            b1.HasKey("FlightId", "Id");

                            b1.HasIndex("CodeshareAirlineId");

                            b1.ToTable("Codeshares");

                            b1.HasOne("Core.FlightContext.FlightInfo.Airline", "CodeshareAirline")
                                .WithMany()
                                .HasForeignKey("CodeshareAirlineId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("FlightId");

                            b1.Navigation("CodeshareAirline");
                        });

                    b.Navigation("Aircraft");

                    b.Navigation("Airline");

                    b.Navigation("ArrivalAirport");

                    b.Navigation("Boarding")
                        .IsRequired();

                    b.Navigation("Codeshare");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("Core.FlightContext.FlightInfo.Aircraft", b =>
                {
                    b.HasOne("Core.FlightContext.FlightInfo.AircraftType", "AircraftType")
                        .WithMany()
                        .HasForeignKey("AircraftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.FlightContext.FlightInfo.Airline", "Airline")
                        .WithMany("Fleet")
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.PassengerContext.Regulatory.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.SeatingContext.SeatMap", "SeatMap")
                        .WithMany()
                        .HasForeignKey("SeatMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AircraftType");

                    b.Navigation("Airline");

                    b.Navigation("Country");

                    b.Navigation("SeatMap");
                });

            modelBuilder.Entity("Core.FlightContext.FlightInfo.Airline", b =>
                {
                    b.HasOne("Core.PassengerContext.Regulatory.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.FlightContext.FlightInfo.Destination", b =>
                {
                    b.HasOne("Core.PassengerContext.Regulatory.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.FlightContext.JoinClasses.FlightBaggage", b =>
                {
                    b.HasOne("Core.BaggageContext.Baggage", "Baggage")
                        .WithMany("Flights")
                        .HasForeignKey("BaggageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.FlightContext.Flight", "Flight")
                        .WithMany("ListOfCheckedBaggage")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Baggage");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Core.PassengerContext.Booking.FrequentFlyer", b =>
                {
                    b.HasOne("Core.FlightContext.FlightInfo.Airline", "Airline")
                        .WithMany()
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.PassengerContext.Passenger", "Passenger")
                        .WithOne("FrequentFlyer")
                        .HasForeignKey("Core.PassengerContext.Booking.FrequentFlyer", "PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airline");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("Core.PassengerContext.Booking.SpecialServiceRequest", b =>
                {
                    b.OwnsOne("Core.PassengerContext.Booking.SSRCode", "SSRCode", b1 =>
                        {
                            b1.Property<int>("SpecialServiceRequestId")
                                .HasColumnType("integer");

                            b1.Property<string>("Code")
                                .HasColumnType("text")
                                .HasColumnName("Code");

                            b1.Property<string>("Description")
                                .HasColumnType("text")
                                .HasColumnName("Description");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.HasKey("SpecialServiceRequestId");

                            b1.ToTable("SSRCodes");

                            b1.WithOwner()
                                .HasForeignKey("SpecialServiceRequestId");
                        });

                    b.Navigation("SSRCode")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.PassengerContext.JoinClasses.PassengerComment", b =>
                {
                    b.HasOne("Core.PassengerContext.Booking.Comment", "Comment")
                        .WithMany("PaxWithComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.PassengerContext.Passenger", "Passenger")
                        .WithMany("Comments")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("Core.PassengerContext.JoinClasses.PassengerFlight", b =>
                {
                    b.HasOne("Core.FlightContext.Flight", "Flight")
                        .WithMany("ListOfBookedPassengers")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.PassengerContext.Passenger", "Passenger")
                        .WithMany("Flights")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("Core.PassengerContext.JoinClasses.PassengerSpecialServiceRequest", b =>
                {
                    b.HasOne("Core.PassengerContext.Passenger", "Passenger")
                        .WithMany("SSRList")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.PassengerContext.Booking.SpecialServiceRequest", "SpecialServiceRequest")
                        .WithMany()
                        .HasForeignKey("SpecialServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");

                    b.Navigation("SpecialServiceRequest");
                });

            modelBuilder.Entity("Core.PassengerContext.Passenger", b =>
                {
                    b.HasOne("Core.PassengerContext.Booking.BookingReference", "PNR")
                        .WithMany("LinkedPassengers")
                        .HasForeignKey("PNRId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PNR");
                });

            modelBuilder.Entity("Core.PassengerContext.Regulatory.APISData", b =>
                {
                    b.HasOne("Core.PassengerContext.Regulatory.Country", "IssueCountry")
                        .WithMany()
                        .HasForeignKey("IssueCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.PassengerContext.Regulatory.Country", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.PassengerContext.Passenger", "Passenger")
                        .WithMany("TravelDocuments")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.PassengerContext.Regulatory.DocumentType", "DocumentType", b1 =>
                        {
                            b1.Property<int>("APISDataId")
                                .HasColumnType("integer");

                            b1.Property<string>("Type")
                                .HasColumnType("text")
                                .HasColumnName("DocumentType");

                            b1.HasKey("APISDataId");

                            b1.ToTable("DocumentTypes");

                            b1.WithOwner()
                                .HasForeignKey("APISDataId");
                        });

                    b.Navigation("DocumentType");

                    b.Navigation("IssueCountry");

                    b.Navigation("Nationality");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("Core.SeatingContext.Seat", b =>
                {
                    b.HasOne("Core.PassengerContext.Passenger", "Passenger")
                        .WithMany("SeatAssignments")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.SeatingContext.SeatMap", null)
                        .WithMany("Seats")
                        .HasForeignKey("SeatMapId");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("Core.SeatingContext.SeatMap", b =>
                {
                    b.HasOne("Core.FlightContext.FlightInfo.AircraftType", "AircraftType")
                        .WithMany()
                        .HasForeignKey("AircraftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.FlightContext.FlightInfo.Airline", "Airline")
                        .WithMany()
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AircraftType");

                    b.Navigation("Airline");
                });

            modelBuilder.Entity("Core.BaggageContext.Baggage", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Core.FlightContext.Flight", b =>
                {
                    b.Navigation("ListOfBookedPassengers");

                    b.Navigation("ListOfCheckedBaggage");
                });

            modelBuilder.Entity("Core.FlightContext.FlightInfo.Airline", b =>
                {
                    b.Navigation("Fleet");
                });

            modelBuilder.Entity("Core.FlightContext.FlightInfo.Destination", b =>
                {
                    b.Navigation("DepartingFlights");
                });

            modelBuilder.Entity("Core.PassengerContext.Booking.BookingReference", b =>
                {
                    b.Navigation("LinkedPassengers");
                });

            modelBuilder.Entity("Core.PassengerContext.Booking.Comment", b =>
                {
                    b.Navigation("PaxWithComments");
                });

            modelBuilder.Entity("Core.PassengerContext.Passenger", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Flights");

                    b.Navigation("FrequentFlyer");

                    b.Navigation("PassengerCheckedBags");

                    b.Navigation("SSRList");

                    b.Navigation("SeatAssignments");

                    b.Navigation("TravelDocuments");
                });

            modelBuilder.Entity("Core.SeatingContext.SeatMap", b =>
                {
                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
